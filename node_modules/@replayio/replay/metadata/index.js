"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = exports.sanitize = void 0;
const utils_1 = require("../src/utils");
const test = __importStar(require("./test"));
exports.test = test;
// Each known metadata block should have a sanitizer that will check the contents before the upload
const handlers = {
    test: test.validate
};
const ALLOWED_KEYS = Object.keys(handlers);
function isAllowedKey(key) {
    return ALLOWED_KEYS.includes(key);
}
// Sanitizing arbitrary recording metadata before uploading by removing any
// non-object values (allowing null) and limiting object values to known keys or
// userspace keys prefixed by `x-`.
function sanitize(metadata, opts = {}) {
    const updated = {};
    Object.keys(metadata).forEach((key) => {
        const value = metadata[key];
        if (typeof value !== "object") {
            (0, utils_1.maybeLog)(opts.verbose, `Ignoring metadata key "${key}". Expected an object but received ${typeof value}`);
            return;
        }
        if (value === null || key.startsWith("x-")) {
            // passthrough null or userspace types
            updated[key] = value;
        }
        else if (isAllowedKey(key)) {
            // validate known types
            Object.assign(updated, handlers[key](metadata));
        }
        else {
            // and warn when dropping all other types
            (0, utils_1.maybeLog)(opts.verbose, `Ignoring metadata key "${key}". Custom metadata blocks must be prefixed by "x-". Try "x-${key}" instead.`);
        }
    });
    return updated;
}
exports.sanitize = sanitize;
//# sourceMappingURL=index.js.map
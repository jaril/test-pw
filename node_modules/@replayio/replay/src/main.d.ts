import { ensurePuppeteerBrowsersInstalled, ensurePlaywrightBrowsersInstalled, getPlaywrightBrowserPath, getPuppeteerBrowserPath, updateBrowsers } from "./install";
import { Options } from "./types";
export type { BrowserName } from "./types";
declare function listAllRecordings(opts?: {}): {
    buildId: undefined;
    crashData: undefined;
    id: string;
    createTime: string;
    runtime: string;
    metadata: Record<string, unknown>;
    sourcemaps?: import("./types").SourceMapsEntry[] | undefined;
    status: "unknown" | "onDisk" | "uploaded" | "crashed" | "startedWrite" | "startedUpload" | "crashUploaded" | "unusable";
    path?: string | undefined;
    server?: string | undefined;
    recordingId?: string | undefined;
    unusableReason?: string | undefined;
}[];
declare function uploadRecording(id: string, opts?: Options): Promise<string | null>;
declare function processRecording(id: string, opts?: Options): Promise<string | null>;
declare function uploadAllRecordings(opts?: Options): Promise<boolean>;
declare function viewRecording(id: string, opts?: Options): Promise<boolean>;
declare function viewLatestRecording(opts?: Options): Promise<boolean>;
declare function removeRecording(id: string, opts?: Options): boolean;
declare function removeAllRecordings(opts?: {}): void;
export { listAllRecordings, uploadRecording, processRecording, uploadAllRecordings, viewRecording, viewLatestRecording, removeRecording, removeAllRecordings, updateBrowsers, ensurePlaywrightBrowsersInstalled, ensurePuppeteerBrowsersInstalled, getPlaywrightBrowserPath, getPuppeteerBrowserPath, };
//# sourceMappingURL=main.d.ts.map
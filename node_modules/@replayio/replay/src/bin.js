"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const main_1 = require("./main");
commander_1.program
    .command("ls")
    .description("List information about all recordings.")
    .option("--directory <dir>", "Alternate recording directory.")
    .action(commandListAllRecordings);
commander_1.program
    .command("upload <id>")
    .description("Upload a recording to the remote server.")
    .option("--directory <dir>", "Alternate recording directory.")
    .option("--server <address>", "Alternate server to upload recordings to.")
    .option("--api-key <key>", "Authentication API Key")
    .action(commandUploadRecording);
commander_1.program
    .command("process <id>")
    .description("Upload a recording to the remote server and process it.")
    .option("--directory <dir>", "Alternate recording directory.")
    .option("--server <address>", "Alternate server to upload recordings to.")
    .option("--api-key <key>", "Authentication API Key")
    .action(commandProcessRecording);
commander_1.program
    .command("upload-all")
    .description("Upload all recordings to the remote server.")
    .option("--directory <dir>", "Alternate recording directory.")
    .option("--server <address>", "Alternate server to upload recordings to.")
    .option("--api-key <key>", "Authentication API Key")
    .action(commandUploadAllRecordings);
commander_1.program
    .command("view <id>")
    .description("Load the devtools on a recording, uploading it if needed.")
    .option("--directory <dir>", "Alternate recording directory.")
    .option("--server <address>", "Alternate server to upload recordings to.")
    .option("--api-key <key>", "Authentication API Key")
    .action(commandViewRecording);
commander_1.program
    .command("view-latest")
    .description("Load the devtools on the latest recording, uploading it if needed.")
    .option("--directory <dir>", "Alternate recording directory.")
    .option("--server <address>", "Alternate server to upload recordings to.")
    .option("--api-key <key>", "Authentication API Key")
    .action(commandViewLatestRecording);
commander_1.program
    .command("rm <id>")
    .description("Remove a specific recording.")
    .option("--directory <dir>", "Alternate recording directory.")
    .action(commandRemoveRecording);
commander_1.program
    .command("rm-all")
    .description("Remove all recordings.")
    .option("--directory <dir>", "Alternate recording directory.")
    .action(commandRemoveAllRecordings);
commander_1.program
    .command("update-browsers")
    .description("Update browsers used in automation.")
    .option("--directory <dir>", "Alternate recording directory.")
    .action(commandUpdateBrowsers);
commander_1.program
    .parseAsync()
    .catch((err) => {
    console.log(err);
    process.exit(1);
});
function commandListAllRecordings(opts) {
    const recordings = (0, main_1.listAllRecordings)({ ...opts, verbose: true });
    console.log(JSON.stringify(recordings, null, 2));
    process.exit(0);
}
async function commandUploadRecording(id, opts) {
    const recordingId = await (0, main_1.uploadRecording)(id, { ...opts, verbose: true });
    process.exit(recordingId ? 0 : 1);
}
async function commandProcessRecording(id, opts) {
    const recordingId = await (0, main_1.processRecording)(id, { ...opts, verbose: true });
    process.exit(recordingId ? 0 : 1);
}
async function commandUploadAllRecordings(opts) {
    const uploadedAll = await (0, main_1.uploadAllRecordings)({ ...opts, verbose: true });
    process.exit(uploadedAll ? 0 : 1);
}
async function commandViewRecording(id, opts) {
    const viewed = await (0, main_1.viewRecording)(id, { ...opts, verbose: true });
    process.exit(viewed ? 0 : 1);
}
async function commandViewLatestRecording(opts) {
    const viewed = await (0, main_1.viewLatestRecording)({ ...opts, verbose: true });
    process.exit(viewed ? 0 : 1);
}
function commandRemoveRecording(id, opts) {
    const removed = (0, main_1.removeRecording)(id, { ...opts, verbose: true });
    process.exit(removed ? 0 : 1);
}
function commandRemoveAllRecordings(opts) {
    (0, main_1.removeAllRecordings)({ ...opts, verbose: true });
    process.exit(0);
}
async function commandUpdateBrowsers(opts) {
    await (0, main_1.updateBrowsers)({ ...opts, verbose: true });
    process.exit(0);
}
//# sourceMappingURL=bin.js.map
"use strict";
// Manage installation of browsers for other NPM packages.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateBrowsers = exports.getPuppeteerBrowserPath = exports.getPlaywrightBrowserPath = exports.ensurePuppeteerBrowsersInstalled = exports.ensurePlaywrightBrowsersInstalled = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const https_1 = __importDefault(require("https"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
const EXECUTABLE_PATHS = {
    "darwin:firefox": ["firefox", "Nightly.app", "Contents", "MacOS", "firefox"],
    "linux:chromium": ["chrome-linux", "chrome"],
    "linux:firefox": ["firefox", "firefox"],
};
/**
 * Installs the Replay-enabled playwright browsers for the current platform is
 * not already installed
 */
async function ensurePlaywrightBrowsersInstalled(kind = "all", opts = {}) {
    (0, utils_1.maybeLog)(opts.verbose, `Installing ${kind === "all" ? "browsers" : kind} for ${process.platform}`);
    if (kind !== "all" && !getPlatformKey(kind)) {
        console.log(`${kind} browser for Replay is not supported on ${process.platform}`);
        return;
    }
    switch (process.platform) {
        case "darwin":
            if (["all", "firefox"].includes(kind)) {
                await installReplayBrowser("macOS-replay-playwright.tar.xz", "playwright", "firefox", "firefox", opts);
            }
            break;
        case "linux":
            if (["all", "firefox"].includes(kind)) {
                await installReplayBrowser("linux-replay-playwright.tar.xz", "playwright", "firefox", "firefox", opts);
            }
            if (["all", "chromium"].includes(kind)) {
                await installReplayBrowser("linux-replay-chromium.tar.xz", "playwright", "replay-chromium", "chrome-linux", opts);
            }
            break;
    }
}
exports.ensurePlaywrightBrowsersInstalled = ensurePlaywrightBrowsersInstalled;
/**
 * Installs the Replay-enabled puppeteer browsers for the current platform is
 * not already installed
 */
async function ensurePuppeteerBrowsersInstalled(kind = "all", opts = {}) {
    (0, utils_1.maybeLog)(opts.verbose, `Installing ${kind === "all" ? "browsers" : kind} for ${process.platform}`);
    if (kind !== "all" && !getPlatformKey(kind)) {
        console.log(`${kind} browser for Replay is not supported on ${process.platform}`);
        return;
    }
    switch (process.platform) {
        case "linux":
            if (["all", "chromium"].includes(kind)) {
                await installReplayBrowser("linux-replay-chromium.tar.xz", "puppeteer", "replay-chromium", "chrome-linux", opts);
            }
            break;
    }
}
exports.ensurePuppeteerBrowsersInstalled = ensurePuppeteerBrowsersInstalled;
async function updateBrowsers(opts = {}) {
    switch (process.platform) {
        case "darwin":
            await updateReplayBrowser("macOS-replay-playwright.tar.xz", "playwright", "firefox", "firefox", opts);
            break;
        case "linux":
            await updateReplayBrowser("linux-replay-playwright.tar.xz", "playwright", "firefox", "firefox", opts);
            await updateReplayBrowser("linux-replay-chromium.tar.xz", "playwright", "replay-chromium", "chrome-linux", opts);
            await updateReplayBrowser("linux-replay-chromium.tar.xz", "puppeteer", "replay-chromium", "chrome-linux", opts);
            break;
    }
}
exports.updateBrowsers = updateBrowsers;
function getPlatformKey(browserName) {
    const key = `${process.platform}:${browserName}`;
    switch (key) {
        case "darwin:firefox":
        case "linux:firefox":
        case "linux:chromium":
            return key;
    }
    return undefined;
}
function getExecutablePath(runner, browserName) {
    // Override with replay specific browsers.
    const replayDir = (0, utils_1.getDirectory)();
    const key = getPlatformKey(browserName);
    if (!key) {
        return null;
    }
    return path_1.default.join(replayDir, runner, ...EXECUTABLE_PATHS[key]);
}
/**
 * Returns the path to playwright for the current platform
 */
function getPlaywrightBrowserPath(kind) {
    return getExecutablePath("playwright", kind);
}
exports.getPlaywrightBrowserPath = getPlaywrightBrowserPath;
/**
 * Returns the path to puppeteer for the current platform
 */
function getPuppeteerBrowserPath(kind) {
    return getExecutablePath("puppeteer", kind);
}
exports.getPuppeteerBrowserPath = getPuppeteerBrowserPath;
// Installs a browser if it isn't already installed.
async function installReplayBrowser(name, subdir, srcName, dstName, opts) {
    const replayDir = (0, utils_1.getDirectory)();
    const browserDir = path_1.default.join(replayDir, subdir);
    if (fs_1.default.existsSync(path_1.default.join(browserDir, dstName))) {
        (0, utils_1.maybeLog)(opts.verbose, `Skipping ${dstName}. Already exists in ${browserDir}`);
        return;
    }
    const contents = await downloadReplayFile(name, opts);
    for (const dir of [replayDir, browserDir]) {
        if (!fs_1.default.existsSync(dir)) {
            fs_1.default.mkdirSync(dir);
        }
    }
    (0, utils_1.maybeLog)(opts.verbose, `Saving ${dstName} to ${browserDir}`);
    fs_1.default.writeFileSync(path_1.default.join(browserDir, name), contents);
    (0, child_process_1.spawnSync)("tar", ["xf", name], { cwd: browserDir });
    fs_1.default.unlinkSync(path_1.default.join(browserDir, name));
    if (srcName != dstName) {
        fs_1.default.renameSync(path_1.default.join(browserDir, srcName), path_1.default.join(browserDir, dstName));
    }
}
// Updates a browser if it is already installed.
async function updateReplayBrowser(name, subdir, srcName, dstName, opts) {
    const replayDir = (0, utils_1.getDirectory)(opts);
    const browserDir = path_1.default.join(replayDir, subdir);
    const dstDir = path_1.default.join(browserDir, dstName);
    if (fs_1.default.existsSync(dstDir)) {
        // Remove the browser so installReplayBrowser will reinstall it. We don't have a way
        // to see that the current browser is up to date.
        fs_1.default.rmSync(dstDir, { force: true, recursive: true });
    }
    else {
        (0, utils_1.maybeLog)(opts.verbose, `Browser ${name} is not installed.`);
        return;
    }
    await installReplayBrowser(name, subdir, srcName, dstName, opts);
    (0, utils_1.maybeLog)(opts.verbose, `Updated.`);
}
async function downloadReplayFile(downloadFile, opts) {
    const options = {
        host: "static.replay.io",
        port: 443,
        path: `/downloads/${downloadFile}`,
    };
    for (let i = 0; i < 5; i++) {
        const waiter = (0, utils_1.defer)();
        (0, utils_1.maybeLog)(opts.verbose, `Downloading ${downloadFile} from replay.io (Attempt ${i + 1} / 5)`);
        const request = https_1.default.get(options, (response) => {
            if (response.statusCode != 200) {
                console.log(`Download received status code ${response.statusCode}, retrying...`);
                request.destroy();
                waiter.resolve(null);
                return;
            }
            const buffers = [];
            response.on("data", (data) => buffers.push(data));
            response.on("end", () => waiter.resolve(buffers));
        });
        request.on("error", (err) => {
            console.log(`Download error ${err}, retrying...`);
            request.destroy();
            waiter.resolve(null);
        });
        const buffers = await waiter.promise;
        if (buffers) {
            return Buffer.concat(buffers);
        }
        (0, utils_1.maybeLog)(opts.verbose, `Download of ${downloadFile} complete`);
    }
    throw new Error("Download failed, giving up");
}
//# sourceMappingURL=install.js.map
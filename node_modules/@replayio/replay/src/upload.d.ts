/// <reference types="node" />
import { Options, RecordingMetadata, SourceMapsEntry } from "./types";
declare function initConnection(server: string, accessToken?: string, verbose?: boolean, agent?: any): Promise<boolean>;
declare function connectionCreateRecording(id: string, buildId: string): Promise<string>;
declare function buildRecordingMetadata(metadata: Record<string, unknown>, opts?: Options): {
    recordingData: {
        duration: number;
        url: string;
        title: string;
        operations: object;
        lastScreenData: string;
        lastScreenMimeType: string;
    };
    metadata: import("../metadata/types").UnstructuredMetadata;
};
declare function setRecordingMetadata(id: string, metadata: RecordingMetadata): Promise<void>;
declare function connectionProcessRecording(recordingId: string): void;
declare function connectionWaitForProcessed(recordingId: string): Promise<unknown>;
declare function connectionReportCrash(data: any): Promise<void>;
declare function connectionUploadRecording(recordingId: string, contents: Buffer): Promise<unknown[]>;
declare function connectionUploadSourcemap(recordingId: string, metadata: SourceMapsEntry, content: string): Promise<string>;
declare function closeConnection(): void;
export { initConnection, connectionCreateRecording, connectionProcessRecording, connectionWaitForProcessed, connectionUploadRecording, connectionUploadSourcemap, connectionReportCrash, closeConnection, setRecordingMetadata, buildRecordingMetadata, };
//# sourceMappingURL=upload.d.ts.map
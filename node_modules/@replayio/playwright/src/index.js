"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.devices = exports.getExecutablePath = exports.getMetadataFilePath = void 0;
const replay_1 = require("@replayio/replay");
const utils_1 = require("@replayio/replay/src/utils");
const path_1 = __importDefault(require("path"));
function getDeviceConfig(browserName) {
    const executablePath = getExecutablePath(browserName);
    if (!executablePath) {
        console.warn(`${browserName} is not supported on this platform`);
    }
    const env = {
        ...process.env,
        RECORD_ALL_CONTENT: 1,
    };
    // When TEST_WORKER_INDEX is set, this is being run in the context of a
    // @playwright/test worker so we create a per-worker metadata file that can be
    // used by the reporter to inject test-specific metadata which will be picked
    // up by the driver when it creates a new recording
    if (process.env.TEST_WORKER_INDEX) {
        const workerIndex = +(process.env.TEST_WORKER_INDEX || 0);
        env.RECORD_REPLAY_METADATA = undefined;
        env.RECORD_REPLAY_METADATA_FILE = getMetadataFilePath(workerIndex);
    }
    return {
        launchOptions: {
            executablePath,
            env,
        },
        defaultBrowserType: browserName,
    };
}
function getMetadataFilePath(workerIndex = 0) {
    return path_1.default.join((0, utils_1.getDirectory)(), `PLAYWRIGHT_METADATA_${workerIndex}`);
}
exports.getMetadataFilePath = getMetadataFilePath;
function getExecutablePath(browserName) {
    return (0, replay_1.getPlaywrightBrowserPath)(browserName);
}
exports.getExecutablePath = getExecutablePath;
exports.devices = {
    get "Replay Firefox"() {
        return getDeviceConfig("firefox");
    },
    get "Replay Chromium"() {
        return getDeviceConfig("chromium");
    },
};
//# sourceMappingURL=index.js.map